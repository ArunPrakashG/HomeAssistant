# This is a basic workflow to help you get started with Actions

name: LUNA-CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events on all branches
on: [push, pull_request]
env:
  CONFIGURATION: Release
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SDK_VERSION: 3.1.x
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NET_CORE_VERSION: netcoreapp3.1  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  main:    
    strategy:
       matrix:
         os: [macos-latest, ubuntu-latest, windows-latest]
           
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

    - name: Verify .NET Core
      run: dotnet --info
   
    - name: Build Luna
      run: dotnet build Luna -c "${{ env.CONFIGURATION }}" -p:UseAppHost=false --nologo

    - name: Perform cleanup of Luna in preparation for publishing
      run: dotnet clean Luna -c "${{ env.CONFIGURATION }}" -p:UseAppHost=false --nologo

    - name: Restore packages in preparation for Luna publishing
      run: dotnet restore Luna

    - name: Publish Luna on Unix
      if: startsWith(matrix.os, 'macos-') || startsWith(matrix.os, 'ubuntu-')
      env:
        VARIANTS: generic linux-arm linux-arm64 linux-x64 osx-x64 win-x64
      shell: sh
      run: |
        set -eu
        publish() {
            if [ "$1" = 'generic' ]; then
                local variantArgs="-p:UseAppHost=false"
            else
                local variantArgs="-p:PublishSingleFile=true -p:PublishTrimmed=true -r $1"
            fi
            dotnet publish Luna -c "$CONFIGURATION" -f "$NET_CORE_VERSION" -o "out/${1}" --no-restore --nologo $variantArgs
                      
            if command -v 7z >/dev/null; then
                7z a -bd -slp -tzip -mm=Deflate -mx=1 "out/LUNA-${1}.zip" "${GITHUB_WORKSPACE}/out/${1}/*"
            elif command -v zip >/dev/null; then
                (
                    cd "${GITHUB_WORKSPACE}/out/${1}"
                    zip -1 -q -r "../LUNA-${1}.zip" .
                )
            else
                echo "ERROR: No supported zip tool!"
                return 1
            fi
        }
        jobs=""
        for variant in $VARIANTS; do
            publish "$variant" &
            jobs="$jobs $!"
        done
        for job in $jobs; do
            wait "$job"
        done
    - name: Publish Luna on Windows
      if: startsWith(matrix.os, 'windows-')
      env:
        VARIANTS: generic generic-netf linux-arm linux-arm64 linux-x64 osx-x64 win-x64
      shell: pwsh
      run: |
        Set-StrictMode -Version Latest
        $ErrorActionPreference = 'Stop'
        $ProgressPreference = 'SilentlyContinue'
        $PublishBlock = {
            param($variant)
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'
            $ProgressPreference = 'SilentlyContinue'
            Set-Location "$env:GITHUB_WORKSPACE"
            if ($variant -like '*-netf') {
                $targetFramework = $env:NET_FRAMEWORK_VERSION
            } else {
                $targetFramework = $env:NET_CORE_VERSION
            }
            if ($variant -like 'generic*') {
                $variantArgs = '-p:UseAppHost=false'
            } else {
                $variantArgs = '-p:PublishSingleFile=true', '-p:PublishTrimmed=true', '-r', "$variant"
            }
            dotnet publish ArchiSteamFarm -c "$env:CONFIGURATION" -f "$targetFramework" -o "out\$variant" --no-restore --nologo $variantArgs
            if ($LastExitCode -ne 0) {
                throw "Last command failed."
            }            
          
            # By default use fastest compression
            $compressionArgs = '-mx=1'
            # Include extra logic for builds marked for release
            if ($env:GITHUB_REF -like 'refs/tags/*') {
                $tag = $env:GITHUB_REF.Substring(10)
                # Tweak compression args for release publishing
                $compressionArgs = '-mx=9', '-mfb=258', '-mpass=15'               
            }
            7z a -bd -slp -tzip -mm=Deflate $compressionArgs "out\LUNA-$variant.zip" "$env:GITHUB_WORKSPACE\out\$variant\*"
            if ($LastExitCode -ne 0) {
                throw "Last command failed."
            }
        }
        foreach ($variant in $env:VARIANTS.Split([char[]] $null, [System.StringSplitOptions]::RemoveEmptyEntries)) {
            Start-Job -Name "$variant" $PublishBlock -ArgumentList "$variant"
        }
        Get-Job | Receive-Job -Wait -AutoRemoveJob 
         
    - name: Upload LUNA-generic
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_LUNA-generic
        path: out/LUNA-generic.zip

    - name: Upload LUNA-generic-netf
      continue-on-error: true
      if: startsWith(matrix.os, 'windows-')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_LUNA-generic-netf
        path: out/LUNA-generic-netf.zip

    - name: Upload LUNA-linux-arm
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_LUNA-linux-arm
        path: out/LUNA-linux-arm.zip

    - name: Upload LUNA-linux-arm64
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_LUNA-linux-arm64
        path: out/LUNA-linux-arm64.zip

    - name: Upload LUNA-linux-x64
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_LUNA-linux-x64
        path: out/LUNA-linux-x64.zip

    - name: Upload LUNA-osx-x64
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_LUNA-osx-x64
        path: out/LUNA-osx-x64.zip

    - name: Upload LUNA-win-x64
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_LUNA-win-x64
        path: out/LUNA-win-x64.zip

    - name: Create LUNA GitHub release
      id: github_release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: LUNA V${{ github.ref }}
        body_path: .github/RELEASE_TEMPLATE.md
        prerelease: true

    - name: Upload LUNA-generic to GitHub release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.github_release.outputs.upload_url }}
        asset_path: out/LUNA-generic.zip
        asset_name: LUNA-generic.zip
        asset_content_type: application/zip

    - name: Upload LUNA-generic-netf to GitHub release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.github_release.outputs.upload_url }}
        asset_path: out/LUNA-generic-netf.zip
        asset_name: LUNA-generic-netf.zip
        asset_content_type: application/zip

    - name: Upload LUNA-linux-arm to GitHub release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.github_release.outputs.upload_url }}
        asset_path: out/LUNA-linux-arm.zip
        asset_name: LUNA-linux-arm.zip
        asset_content_type: application/zip

    - name: Upload LUNA-linux-arm64 to GitHub release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.github_release.outputs.upload_url }}
        asset_path: out/LUNA-linux-arm64.zip
        asset_name: LUNA-linux-arm64.zip
        asset_content_type: application/zip

    - name: Upload LUNA-linux-x64 to GitHub release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.github_release.outputs.upload_url }}
        asset_path: out/LUNA-linux-x64.zip
        asset_name: LUNA-linux-x64.zip
        asset_content_type: application/zip

    - name: Upload LUNA-osx-x64 to GitHub release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.github_release.outputs.upload_url }}
        asset_path: out/LUNA-osx-x64.zip
        asset_name: LUNA-osx-x64.zip
        asset_content_type: application/zip

    - name: Upload LUNA-win-x64 to GitHub release
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.github_release.outputs.upload_url }}
        asset_path: out/LUNA-win-x64.zip
        asset_name: LUNA-win-x64.zip
        asset_content_type: application/zip
